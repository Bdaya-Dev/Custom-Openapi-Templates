{{>header}}

import 'dart:convert';
import 'dart:async';
import 'package:dio/dio.dart';
import 'package:built_value/serializer.dart';

{{#operations}}
{{#imports}}import '{{.}}';
{{/imports}}

class {{classname}} {
    final Dio _dio;
    Serializers _serializers;
    bool _fileNamesHaveBrackets;
    String get _appended => _fileNamesHaveBrackets ? '[]': '';
    {{classname}}(this._dio, this._serializers,this._fileNamesHaveBrackets);

    {{#operation}}
    /// {{{summary}}}
    ///
    /// {{{notes}}}
    Future<Response<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}>> {{nickname}}({
        {{#requiredParams}}
        required {{{dataType}}} {{paramName}},{{/requiredParams}}{{#optionalParams}}
        {{{dataType}}}? {{paramName}},{{/optionalParams}}
        CancelToken? cancelToken,
        Map<String, dynamic>? headers,
        Map<String, dynamic>? extra,
        ValidateStatus? validateStatus,
        ProgressCallback? onSendProgress,
        ProgressCallback? onReceiveProgress,
    }) async {
        final String _path = '{{{path}}}'{{#pathParams}}.replaceAll('{' r'{{baseName}}' '}', {{{paramName}}}.toString()){{/pathParams}};

        final queryParams = <String, dynamic>{};
        final headerParams = <String, dynamic>{
            if (headers != null) ...headers,
        };
        dynamic bodyData;

        {{#headerParams}}
        headerParams[r'{{baseName}}'] = {{paramName}};
        {{/headerParams}}
        {{#queryParams}}
        queryParams[r'{{baseName}}'] = {{paramName}};
        {{/queryParams}}
        queryParams.removeWhere((key,dynamic value) => value == null);
        headerParams.removeWhere((key,dynamic value) => value == null);

        final contentTypes = <String>[{{^hasConsumes}}];{{/hasConsumes}}{{#hasConsumes}}{{#consumes}}
            '{{{mediaType}}}',{{/consumes}}
        ];{{/hasConsumes}}
        {{#hasFormParams}}

        final  formData = <String, dynamic>{};
        final _formFiles = <MapEntry<String,MultipartFile>>[];        

        {{#isMultipart}}
        {{#formParams}}
        {{^isFile}}
        
        //Info: 
        //primitiveType: {{primitiveType}}, isMap: {{isMap}}, isArray: {{isArray}}
        //basetype: {{baseType}}, datatype: {{dataType}}, containertype: {{containerType}}, 
        if ({{paramName}} != null) {
            formData[r'{{baseName}}'] = parameterToString(_serializers, {{paramName}},type: const FullType({{#isArray}}BuiltList,[const FullType({{baseType}})]{{/isArray}}{{^isArray}}{{dataType}}{{/isArray}}  ));
        }
        {{/isFile}}
        {{#isFile}}
        if ({{paramName}} != null) {
            {{#isArray}}
            _formFiles.addAll({{paramName}}.map((x)=>MapEntry(r'{{baseName}}'+_appended,x)));
            {{/isArray}}
            {{^isArray}}
            _formFiles.add(MapEntry(r'{{baseName}}', {{paramName}}));
            {{/isArray}}
        }
        {{/isFile}}       
        {{/formParams}}       
        final formDataObj = FormData.fromMap(formData);
        formDataObj.files.addAll(_formFiles);      
        bodyData = formDataObj;
        {{/isMultipart}}
        {{^isMultipart}}
        {{#formParams}}
        formData['{{baseName}}'] = parameterToString(_serializers, {{paramName}},type: const FullType({{#isArray}}BuiltList,[const FullType({{baseType}})]{{/isArray}}{{^isArray}}{{dataType}}{{/isArray}}  ));
        {{/formParams}}
        bodyData = formData;
        {{/isMultipart}}
        {{/hasFormParams}}
        {{#bodyParam}}

            {{#isArray}}
            const type = FullType(BuiltList, [FullType({{baseType}})]);
            {{/isArray}}
            {{^isArray}}
            const type = FullType({{baseType}});
            {{/isArray}}
        final serializedBody = _serializers.serialize({{paramName}},specifiedType: type);
        final json{{paramName}} = json.encode(serializedBody);
        bodyData = json{{paramName}};
        {{/bodyParam}}

        return _dio.request<dynamic>(
            _path,
            queryParameters: queryParams,
            data: bodyData,
            options: Options(
                method: '{{httpMethod}}'.toUpperCase(),
                {{#isResponseFile}}
                responseType: ResponseType.bytes,
                {{/isResponseFile}}
                headers: headerParams,
                extra: <String, dynamic>{
                    'secure': <dynamic>[{{^hasAuthMethods}}],{{/hasAuthMethods}}{{#hasAuthMethods}}
                        {{#authMethods}}{
                            'type': '{{type}}',
                            'name': '{{name}}',{{#isApiKey}}
                            'keyName': '{{keyParamName}}',
                            'where': '{{#isKeyInQuery}}query{{/isKeyInQuery}}{{#isKeyInHeader}}header{{/isKeyInHeader}}',{{/isApiKey}}
                        },{{/authMethods}}
                    ],{{/hasAuthMethods}}
                    if (extra != null) ...extra,
                },
                validateStatus: validateStatus,
                contentType: contentTypes.isNotEmpty ? contentTypes[0] : 'application/json',
            ),
            cancelToken: cancelToken,
            onSendProgress: onSendProgress,
            onReceiveProgress: onReceiveProgress,
        ){{#returnType}}.then((response) {
            final dynamic _respData = response.data;            
        {{#isResponseFile}}
            final data = _respData;
        {{/isResponseFile}}
        {{^isResponseFile}}
        {{#returnSimpleType}}
        {{#returnTypeIsPrimitive}}
            final data = _respData as {{{returnType}}};
        {{/returnTypeIsPrimitive}}
        {{^returnTypeIsPrimitive}}
            final serializer = _serializers.serializerForType({{{returnType}}}) as Serializer<{{{returnType}}}>?;
            final data =  serializer == null
          ? null
          :_serializers.deserializeWith<{{{returnType}}}>(serializer, _respData is String ? jsonDecode(_respData) : _respData,);
        {{/returnTypeIsPrimitive}}
        {{/returnSimpleType}}
        {{^returnSimpleType}}
            const collectionType = {{#isMap}}BuiltMap{{/isMap}}{{^isMap}}BuiltList{{/isMap}};
            const type = FullType(collectionType, [{{#isMap}}FullType(String), {{/isMap}}FullType({{{returnBaseType}}})]);
            final data = _serializers.deserialize(_respData is String ? jsonDecode(_respData) : _respData, specifiedType: type,) as {{{returnType}}};
        {{/returnSimpleType}}
        {{/isResponseFile}}

            return Response<{{{returnType}}}>(
                data: data,
                headers: response.headers,
                requestOptions: response.requestOptions,
                redirects: response.redirects,
                statusCode: response.statusCode,
                statusMessage: response.statusMessage,
                extra: response.extra,
            );
        }){{/returnType}};
    }

    {{/operation}}
}
{{/operations}}
