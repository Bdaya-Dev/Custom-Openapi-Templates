library {{pubName}}.api;

import 'package:dio/dio.dart';
import 'package:built_value/serializer.dart';
import 'package:{{pubName}}/serializers.dart';
import 'package:{{pubName}}/auth/api_key_auth.dart';
import 'package:{{pubName}}/auth/basic_auth.dart';
import 'package:{{pubName}}/auth/oauth.dart';
{{#apiInfo}}{{#apis}}import 'package:{{pubName}}/api/{{classFilename}}.dart';
{{/apis}}{{/apiInfo}}

final _defaultInterceptors = [OAuthInterceptor(), BasicAuthInterceptor(), ApiKeyAuthInterceptor()];

class {{clientName}} {

    late Dio dio;
    late Serializers serializers;
    final defaultBasePath = '{{{basePath}}}';
    final bool fileNamesHaveBrackets;

    {{clientName}}({Dio? dioOverride, Serializers? serializersOverride, String? basePathOverride, int? connectTimeoutOverride, int? receiveTimeoutOverride, List<Interceptor>? interceptorsOverride, this.fileNamesHaveBrackets=true,}) {
        if (dioOverride == null) {
            final options = BaseOptions(
                baseUrl: basePathOverride ?? defaultBasePath,
                connectTimeout: connectTimeoutOverride ?? 5000,
                receiveTimeout: receiveTimeoutOverride ?? 3000,
            );
            this.dio = Dio(options);
        }
        else {
            this.dio = dioOverride;
        }

        if (interceptorsOverride == null) {
            this.dio.interceptors.addAll(_defaultInterceptors);
        } else {
            this.dio.interceptors.addAll(interceptorsOverride);
        }

        this.serializers = serializersOverride ?? standardSerializers;
    }

     void doForAllInterceptor<T extends Interceptor>(
    void Function(T interceptor) action,
  ) {
    for (var item in this.dio.interceptors.whereType<T>()) {
      action(item);
    }
  }
   void setOAuthToken(String name, String token) {
     doForAllInterceptor<OAuthInterceptor>((item) {
      item.tokens[name] = token;
    });   
  }

   void setBasicAuth(String name, String username, String password) {
    doForAllInterceptor<BasicAuthInterceptor>((item) {
      item.authInfo[name] = BasicAuthInfo(username, password);
    });
  }

  void setApiKey(String name, String apiKey) {
    doForAllInterceptor<ApiKeyAuthInterceptor>((item) {
      item.apiKeys[name] = apiKey;
    });
  }

{{#apiInfo}}{{#apis}}
    /**
    * Get {{classname}} instance, base route and serializer can be overridden by a given but be careful,
    * by doing that all interceptors will not be executed
    */
    {{classname}} get{{classname}}() {
    return {{classname}}(dio, serializers, fileNamesHaveBrackets);
    }

{{/apis}}{{/apiInfo}}
}
